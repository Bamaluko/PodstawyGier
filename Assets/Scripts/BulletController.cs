using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BulletController : MonoBehaviour
{
    /* DESCRIPTION OF ALL PROPERTIES
     * 
     * damageAmount - how much damage does the bullet deal to the enemies.
     * 
     * bulletSpeed - Speed given to the bullet (assigned in Unity project).
     * 
     * theRB - Rigid body of the current object.
     * 
     * moveDir - Vector [x, y] indicating direction of bullets movement.
     * 
     * impactEffect - A special effect generated by the engine
     * whenever bullet hits something. A geme object.
     * 
     */

    public int damageAmount = 1;

    public float bulletSpeed;
    public Rigidbody2D theRB;
    public Vector2 moveDir;

    public GameObject impactEffect;

    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        //On each update we set velocity for the RB to be moveDir times bulletSpeed
        theRB.velocity = moveDir * bulletSpeed;
    }

    //Special method that activates on collision with another object that has
    //collisions with this game object enabled.
    private void OnTriggerEnter2D(Collider2D other)
    {
        if(other.tag == "Enemy")
        {
            other.GetComponent<EnemyHealthController>().DamageEnemy(damageAmount);
        }

        //We make sure that we have our special efect assigned properly.
        if (impactEffect != null)
        {
            //We create instance of special effect in position of the bullet (taken from its transform).
            //Quaterion.identity is used because as rotation. Quaterion is a mechanism used by Unity to deal
            //with rotation etc. and using its identity here tells: "We don't care about rotation, take
            //whichever you've got".
            Instantiate(impactEffect, transform.position, Quaternion.identity);
        }
        //After colision detected and special effect played: destroy the bullet!
        Destroy(gameObject);
    }

    //Special method triggered whenever object escapes the field of vision (camera).
    private void OnBecameInvisible()
    {
        //Destroy object.
        Destroy(gameObject);
    }
}
